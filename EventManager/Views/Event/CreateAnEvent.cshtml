@model EventManager.ViewModels.Event.EventViewModel

@{
    ViewBag.Title = "CreateAnEvent";
}

@if (Model.Id == 0)
{
    <h2>Create An Event</h2>
}
else
{
    <h2>Edit An Event</h2>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDateTime, new { htmlAttributes = new { @class = "form-control", @id = "startDateTime" } })
                @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDateTime, new { htmlAttributes = new { @class = "form-control", @id = "endDatePicker" } })
                @Html.ValidationMessageFor(model => model.EndDateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to Home Page", "Index", "Home")
</div>
<script>
    flatpickr.l10ns.default.firstDayOfWeek = 1; // Changing it to Monday, because the default date is Sunday
    var currentTime = "@DateTime.Now.ToString("HH:mm")"
    var flatpickrConf = {
        weekNumbers: true,
        minDate: "today",
        enableTime: true,
        time_24hr: true,
        minTime: currentTime
    };
    $("#startDateTime").flatpickr(flatpickrConf);
    flatpickrConf.minTime="@DateTime.Now.AddMinutes(1).ToString("HH:mm")";
    $("#endDatePicker").flatpickr(flatpickrConf);

</script>